---
format: markdown+lhs
title: How to Write a Lens for Data with Polymorphic Members?
...

- This document should pass the doctest.

- これでdoctest通るはず.


Now, how do we write a lens for the `Speaker` type?

> {-# LANGUAGE  RankNTypes, TemplateHaskell #-}
> {-# OPTIONS -Wall -fno-warn-unused-do-bind #-}
> import Control.Monad.Trans.State.Strict
> import Control.Monad.IO.Class
> import Data.Lens.Strict
> import Data.Lens.Template (makeLenses)
>
> newtype Speech = Speech (Show a => a -> String)
> data Speaker = Speaker
>   { _speak :: Speech}
> $(makeLenses [''Speaker])

We can use the *nominal typing*,  to make our code typecheck with
little modification. Declare `Speech` as a new type instead of making
it a type synonim. Because the type `Speech` is now monomorphic, we
can write `lens` for `Speaker`. We can even leave our task to
`makeLenses`.

> geisha :: Speaker
> geisha = Speaker $ Speech ((++" dosu.") . show)

> -- | The output of the main program should be as follows.
> --
> -- >>> main
> -- 130 dosu.
> -- 390 de gozaru.
>
> main :: IO ()
> main = flip evalStateT geisha $ do
>   putSpeak (130 :: Int)
>   speak ~= Speech ((++" de gozaru.") . show)
>   putSpeak (390 :: Int)
>     where
>       putSpeak x = do
>         Speech f <- access speak
>         liftIO $ putStrLn $ f x