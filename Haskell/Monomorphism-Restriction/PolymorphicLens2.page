---
format: markdown+lhs
title: How to Write a Lens for Data with Polymorphic Members?
...

- This document results in a error.

Now, let's try writing a lens for the `Speaker` type.

> {-# LANGUAGE ImpredicativeTypes, RankNTypes, TemplateHaskell #-}
> {-# OPTIONS -Wall #-}
> import Data.Lens.Strict
>
> data Speaker = Speaker
>   { _speak :: Show a => a -> String }
>

The following code is the same as what 
`$(makeLenses [''Speaker])` would have generated, from
 `Data.Lens.Template`.  

> speak :: Lens Speaker (forall a. Show a => a -> String)
> speak = lens _speak (\f s -> s{_speak = f})

Unfortunately, this results in

```
PolymorphicLens2.lhs:23:16:
    Couldn't match expected type `forall a. Show a => a -> String'
                with actual type `a0 -> String'
    Expected type: Speaker -> forall a. Show a => a -> String
      Actual type: Speaker -> a0 -> String
    In the first argument of `lens', namely `_speak'
    In the expression: lens _speak (\ f s -> s {_speak = f})
```

