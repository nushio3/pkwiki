---
format: markdown+lhs
title: How to Write a Lens for Data with Polymorphic Members?
...

- This document results in a error.

Now, let's try writing a lens for the `Speaker` type.

> {-# LANGUAGE ImpredicativeTypes, RankNTypes, TemplateHaskell #-}
> {-# OPTIONS -Wall #-}
> import Data.Lens.Strict
>
> data Speaker = Speaker
>   { _speak :: Show a => a -> String }
>

I could have imported `Data.Lens.Template` and use
`$(makeLenses [''Speaker])`
let the 

> speak :: Lens Speaker (Show a => a -> String)
> speak = lens _speak (\f s -> s{_speak = f})

> main :: IO ()
> main = return ()
