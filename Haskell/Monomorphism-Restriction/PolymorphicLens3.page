---
format: markdown+lhs
title: How to Write a Lens for Data with Polymorphic Members?
...

- This document results in a error, too.

Now, let's try writing a lens for the `Speaker` type.

> {-# LANGUAGE ImpredicativeTypes, NoMonomorphismRestriction,
>     RankNTypes, TemplateHaskell #-}
> {-# OPTIONS -Wall #-}
> import Control.Comonad.Trans.Store
> import Control.Monad.Trans.State.Strict
> import Control.Monad.IO.Class
> import Data.Functor.Identity
> import Data.Lens.Strict
> import Unsafe.Coerce
>
> type Speech = (Show a) => a -> String
> data Speaker = Speaker
>   { _speak :: Speech}
>

Let us study where the error comes from. The clue is that the following code does
not typecheck;

> -- speak :: Lens Speaker Speech
> -- speak = lens (undefined :: Speaker -> Speech)
> --              (undefined :: Speech -> Speaker -> Speaker)

Althought it seems to perfectly match the definition of `lens`:

``
lens :: (a -> b) -> (b -> a -> a) -> Lens a b
``

The two are different. In the definition `lens` is a rank-1
polymorphic function. On the other hand, to write the lens for
`Speaker`, we need `a` in the `lens` to be of a polymorphic type
`Speech`, so `lens` needs to be a rank-2 polymorphic function.

``
-- as defined in Data.Lens.Common
lens :: forall a b. (a -> b) -> (b -> a -> a) -> Lens a b
-- as used in the above code (with abbreviation)
lens :: (forall b. a -> b) -> (forall b. b -> a -> a) -> Lens a b
``

Therefore, we cannot write the lens `speak` using `lens`, however hard
we type annotate. The following code typechecks, but you can easily point out
a cheat used here.

> speak :: Lens Speaker Speech
> speak = lens' _speak (\f s -> s{_speak = f})
>   where
>     lens' :: (Speaker->Speech) -> (Speech->Speaker->Speaker) -> Lens Speaker Speech
>     lens' get1 set1 =
>       Lens $ (\a1 -> StoreT (Identity (\b1 -> set1 b1 a1))
>               ((unsafeCoerce (get1::Speaker->(Int->String))) a1)
>               :: StoreT Speech Identity Speaker)


Moreover, even if we could make up a lens, its use is tedious (the following code doesn't typecheck, and the author gave up fixing it.)

> geisha :: Speaker
> geisha = Speaker $ ((++" dosu.") . show)
>
> -- | The output of the main program should be as follows.
> --
> -- >>> main
> -- 130 dosu.
> -- 390 de gozaru.
>
> main :: IO ()
> main = flip evalStateT geisha $ do
>   putSpeak (130 :: Int)
>   let ninjaSpeak :: Speech
>       ninjaSpeak = (++" de gozaru.") . show
>   speak ~= ninjaSpeak
>   putSpeak (390 :: Int)
>     where
>       putSpeak x = do
>         f <- access speak
>         liftIO $ putStrLn $ f x

Is there any [solution](PolymorphicLens4) to this problem?
