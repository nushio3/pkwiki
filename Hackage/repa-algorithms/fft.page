---
format: markdown+lhs
title: vector-fftw entry to fft contest
...

This is a DFT solver that conforms to
[DFT contest](../what-is-the-fastest-dft-in-haskell/main)
regulation. Our module:

> {-# OPTIONS -Wall #-}
> module ContestantRepa where

uses FFT from [hackage:repa-algorithms]():

> import Control.Monad
> import qualified Data.Array.Repa as R
> import Data.Array.Repa (Z(..), (:.)(..))
> import qualified Data.Array.Repa.Algorithms.FFT as FFT
> import Data.Array.Repa.Algorithms.Complex 
> import Solver

The [hackage:repa]() provides multiple array formats. Of which let us use
the unboxed vectors. [hackage:repa-algorithms]() defines its own `Complex`
type, which is not a type constructor but a tuple of `Double`s .

> type Array = R.Array R.U R.DIM1 Complex

In contrast to most of FFT libraries we have dealt with so far, 
[hackage:repa]() does not operate on pure arrays but
operates on arrays in monads.

So, the definition of the initial field remains a pure function:

> solver :: Solver
> solver prob = do
>   let
>     n :: Int
>     n = probSize prob
>     realN :: Double
>     realN = fromIntegral n
>     initF :: Int -> Complex
>     initF i = (re, im)
>       where
>         r = (fromIntegral i + 0.5) / realN
>         re | (x1 prob < r && r < x2 prob) = 1
>            | otherwise                    = 0
>         im = (r-y1 prob)*(r-y2 prob)

But the construction of the initial array is a monadic operation.

>   initVect <- R.computeP $ R.fromFunction (Z :. n) (\(Z :. i) -> initF i)

Also, forward and inverse FFTs are monad, so is the each step of the iteration
as well as its repeatition for `(probRepeat prob)` times.

>   let
>     fwd, bwd, step :: Monad m => Array -> m Array
>     fwd = FFT.fft1dP FFT.Forward
>     bwd = FFT.fft1dP FFT.Inverse
>     step = fwd >=> bwd
>   finalVect <- foldl1 (>=>) (replicate (probRepeat prob) step) $ initVect

Then finally, contestants are to calculate the amplitudes both in the real space and the wave space, and return them.

>   let
>     amp :: Monad m => Array -> m Double
>     amp =  R.sumAllP . R.map ((^2) . mag)
>   ans1 <- amp finalVect 
>   ans2 <- amp =<< fwd finalVect

>   return (ans1 / realN, ans2 / realN^2)   