---
format: markdown+lhs
title: Automatic Differentiation
...

[hackage:ad]()はHaskellによる自動微分の実装です。さっそく使ってみましょう。
まずは必要なライブラリをインポートします。

[hackage:ad]() is a Haskell implementation for automatic differentiation. Lets try it.

> {-# LANGUAGE FlexibleInstances, TypeSynonymInstances #-}
> import           Numeric.AD
> import qualified Algebra.Additive as Additive
> import qualified Algebra.Ring as Ring
> import qualified MathObj.Polynomial as MOP
> import qualified NumericPrelude as NP
> import           Text.Printf

数値微分
=======

Numerical Differentiation
=========================

次のように、関数のある点における微係数を求めることができます。

A few calculation of derivatives at given points.

> -- | test 1. simple derivatives
> --
> -- >>> diff (\x -> x^4) 10
> -- 4000
> -- >>> diff (diff (\x -> x^4)) 10
> -- 1200
> -- >>> diff (diff (diff (\x -> x^4))) 10
> -- 240

以下のように、$\frac{d}{dx}\sin x=\cos x$のような計算ができます。ちょっと荒いですが、テストもできます。(doctestのprop記法が早く実装されるといいですね。)

Here's a quick test for $\frac{d}{dx}\sin x=\cos x$ .

> -- | test 2. quasi quickcheck.
> --
> -- >>> all (==0) $ map (\x -> (diff sin) x - cos x) [0..100]
> -- True

式構造の微分
==========

Differenting expression
=======================

自動微分の中身はどうなっているのでしょう。構文木になっている数式を自動微分に食わせることで、中で何が起こったかを探り出すことができるのではないでしょうか。本格的な構文木を作るのはめどいので簡単なものをでっちあげます。

Let's investigate the inside of automated differentiation by passing it a mock syntax tree.

> newtype Expr = Expr String deriving (Eq, Show)
> instance Num Expr where
>   (Expr a) + (Expr b) = Expr $ printf "(%s+%s)" a b
>   (Expr a) - (Expr b) = Expr $ printf "(%s-%s)" a b
>   (Expr a) * (Expr b) = Expr $ printf "(%s*%s)" a b
>   fromInteger = Expr . show
>   abs = undefined
>   signum = undefined

次のような関数を微分させてみます。

> f :: Num a => a -> a
> f x = x^3 + 42*x + 1

結果はかなり冗長なものになります。実用に供するにはこの後に最適化が欲しそうです。

Hmm, I'll need some optimization after this.

> -- | test 3. symbolic differentiation.
> --
> -- >>> diff f $ Expr "x"
> -- Expr "(((x*((x*1)+(1*x)))+(1*(x*x)))+(1*42))"

多項式の微分
==========

Differentiating Polynominals
============================

初めから多項式しか登場しないと分かっているなら、多項式の係数のみを管理することで効率化がはかれます。
[hackage:numeric-prelude]()に実装があるのですが、現時点(ver 0.3.0.2)ではPreludeの`Num`と一緒には動かないため、そのままでは自動微分に食わせられません。またしてもアドホックに、多項式の表現を作ってしまいましょう。

It'd be easy to perform such optimization of terms if we deal with only polynomials. Actually, there's an implementation of polynomial in [hackage:numeric-prelude]() but it doesn't work with Prelude's `Num` class (at version 0.3.0.2), so we can't feed them to AD as they are. One solution is to create our own polynomial:

> instance (Num a) => Num [a] where
>   (+) = zipWithLonger (+)
>   (-) = zipWithLonger (-)
>   [] * ys = 0
>   (x:xs) * ys = map (*x) ys + (0:) (xs * ys)
>   fromInteger = (:[]) . fromInteger
>   abs = undefined
>   signum = undefined

> zipWithLonger :: Num a => (a->a->a) -> [a] -> [a] -> [a]
> zipWithLonger op xs ys = take n $ zipWith op xs' ys'
>   where
>     n = length xs `max` length ys
>     xs' = xs ++ repeat 0
>     ys' = ys ++ repeat 0

これで、それらしき微分ができます。

Then we get the coefficients for $\frac{df}{dx}$ (with some trailing zeros.)

> -- | test 4. differentiate power series.
> --
> -- >>> diff f [0,1]
> -- [42,0,3,0]

A more elegant solution is to wrap the Polynomial in the `newtype` and write a Num instance for the wrapped type.

もう少しましな解法としては、[hackage:numeric-prelude]()の多項式を`newtype`に包んでから`Num`のインスタンスを宣言することが挙げられます。

> newtype Poly a = Poly {runPoly :: MOP.T a}

> instance (Additive.C a, Ring.C a) => Num (Poly a) where
>   (Poly a) + (Poly b)= Poly $ a NP.+ b
>   (Poly a) - (Poly b)= Poly $ a NP.- b
>   (Poly a) * (Poly b)= Poly $ a NP.* b
>   negate (Poly a) = Poly (NP.negate a)
>   fromInteger = Poly . NP.fromInteger

表示するための関数も作ります。

Functions for printing.

> x :: Poly Int
> x = Poly $ MOP.fromCoeffs [0,1]
> showP :: Poly Int -> String
> showP = ($"") . MOP.showsExpressionPrec 0 "x" . runPoly

これでかっこよく微分ができるようになりました。

Then we have relatively cool differentiations.

> -- | test 5. Differentiate MathObj.Polynomial
> -- >>> putStr $ showP $ f x
> -- 1 + 42*x + 1*x^3
> -- >>> putStr $ showP $ diff f x
> -- 42 + 3*x^2

> main = undefined
