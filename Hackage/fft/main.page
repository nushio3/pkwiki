---
format: markdown+lhs
title: vector-fftw entry to fft contest
...

This is a DFT solver that conforms to
[DFT contest](../what-is-the-fastest-dft-in-haskell/main)
regulation. Our module:

> {-# OPTIONS -Wall #-}
> module ContestantFFT where

uses [hackage:fft]():

> import Debug.Trace
> import Control.Applicative
> import Control.DeepSeq (deepseq)
> import Control.Monad
> import qualified Math.FFT as FFT
> import qualified Math.FFT.Base as FFT (Flag)
> import qualified Data.Array.CArray as A
> import Data.Complex
> import Solver
> import System.Posix.Files (fileExist)

For FFT provided by [hackage:fft]() module, the Fields are of type `CArray`.

> type Array = A.CArray Int (Complex Double)


> solver :: Solver
> solver prob = do

[hackage:fft] can manage the FFTW wisdom (automated tuning results).
So, we will re-use the wisdom whenever it is available.

>   let wisdomFilename = "fft.wisdom"
>   exist <- fileExist wisdomFilename
>   when exist $ do
>     readFile wisdomFilename >>= FFT.importWisdomString >> return ()
>   let ret = (ans1, ans2)
>   ret `deepseq` (FFT.exportWisdomString >>= writeFile wisdomFilename)
>   return ret

The setup for initial Field is the same.

>   where
>     isWise :: Bool
>     isWise = wisdomFlag prob
>     n :: Int
>     n = probSize prob
>     realN :: Double
>     realN = fromIntegral n
>     initVect, finalVect :: Array
>     initVect = A.listArray (0,n-1) $ map initF [0..n-1]
>     initF :: Int -> Complex Double
>     initF i = re :+ im
>       where
>         r = (fromIntegral i + 0.5) / realN
>         re | (x1 prob < r && r < x2 prob) = 1
>            | otherwise                    = 0
>         im = (r-y1 prob)*(r-y2 prob)

In [hackage:fft], we can define forward and inverse DFT via `dftGU`.

>     fftflag :: FFT.Flag
>     fftflag = if isWise then FFT.measure else FFT.estimate
>     fwd, bwd :: Array -> Array
>     fwd = FFT.dftGU FFT.DFTForward fftflag [0]
>     bwd = FFT.dftGU FFT.DFTBackward fftflag [0]
>     step :: Array -> Array
>     step = A.amap (/(realN :+ 0)) . bwd . fwd

Regulation tells us to perfrom the set of forward then backward DFT, for
`(probRepeat prob)` times.

>     finalVect = foldl1 (.) (replicate (probRepeat prob) step) $ initVect

Then finally, contestants are to calculate the amplitudes both in the real space and the wave space, and return them.


>     amp :: Array -> Double
>     amp =  (^2) . A.norm2
>     ans1 = amp finalVect / realN
>     ans2 = amp (fwd $ finalVect) / realN^2
